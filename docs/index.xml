<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Startseite on React Signup Documentation</title>
    <link>https://mt-lampert.github.io/react-signup/</link>
    <description>Recent content in Startseite on React Signup Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    <lastBuildDate>Mon, 13 Dec 2021 13:09:19 +0100</lastBuildDate><atom:link href="https://mt-lampert.github.io/react-signup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing</title>
      <link>https://mt-lampert.github.io/react-signup/Planung/testing/</link>
      <pubDate>Tue, 21 Dec 2021 07:09:54 +0100</pubDate>
      
      <guid>https://mt-lampert.github.io/react-signup/Planung/testing/</guid>
      <description>Die wichtigste Regel:
 Testen muss geplant sein!
 Einfach drauf los und alles testen, was Beine hat &amp;ndash; so funktioniert es nicht! Was funktioniert, ist dort testen, wo wir uns unsicher fühlen: Neue Features, State-Updates, DOM-Updates usw.
Unit-Tests, wo wir nur einzelne Components testen, werden wir aller Wahrscheinlichkeit nach nicht brauchen. Was wir ganz sicher brauchen, sind Integrations-Tests. Dort pruefen wir, wie gut ein Parent-Component mit seinen Child-Components zusammenarbeitet und harmoniert: Ob props in den Child-Components richtig umgesetzt werden, ob Binding richtig funktioniert, ob State-Updates auch auf dem Bildschirm die gewünschten Resultate liefern.</description>
    </item>
    
    <item>
      <title>Warum Test-Driven Development?</title>
      <link>https://mt-lampert.github.io/react-signup/Reflexion/warum-test-driven/</link>
      <pubDate>Sun, 19 Dec 2021 08:24:14 +0100</pubDate>
      
      <guid>https://mt-lampert.github.io/react-signup/Reflexion/warum-test-driven/</guid>
      <description>Ganz einfach, weil man dadurch Zeit spart! Bei einem automatisierten Test kann man z.B. Formularfelder automatisch vom Test-Generator ausfüllen lassen, danach den Submit-Button automatisch klicken lassen und daraufhin das neu gerenderte Ergebnis testen.
Beim nächsten Test kann man das Formular dann mit anderen Einträgen automatisch ausfüllen lassen, danach den Submit-Button wieder automatisch klicken lassen und daraufhin ein anderes neu gerendertes Ergebnis testen. Und deshalb will ich Zeit investieren, um diese Sorte Test zu lernen &amp;ndash; damit ich hinterher umso mehr Zeit einsparen kann.</description>
    </item>
    
    <item>
      <title>UseState braucht UseEffect</title>
      <link>https://mt-lampert.github.io/react-signup/Reflexion/useState-and-useEffect/</link>
      <pubDate>Sun, 19 Dec 2021 08:18:59 +0100</pubDate>
      
      <guid>https://mt-lampert.github.io/react-signup/Reflexion/useState-and-useEffect/</guid>
      <description>Beim Rumprobieren mit Ronas Version des Projektes kam es zu überraschenden Effekten: State-Variablen, die wir mit setX() upgedatet haben, hatten direkt nach dem Update immer noch ihren alten Wert:
function changeHandler(event) { // alter Wert: &amp;#34;hi&amp;#34;  // target.value hat &amp;#34;his&amp;#34;  setFoo(event.target.value) // wird NICHT ausgefuehrt!  // OBWOHL foo jetzt eigentlich  // den Wert &amp;#34;his&amp;#34; haben muesste!  if (foo.length &amp;gt; 2) { changeButton() } } Das Problem ist, dass setFoo() asynchron ausgefuehrt wird.</description>
    </item>
    
  </channel>
</rss>
